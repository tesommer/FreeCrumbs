     @productandversion@\n"
+ "@copyright@\n"
+ "See LISENCE.txt for lisence terms.\n"
+ "\n"
+ "Finf: Print file info to standard output.\n"
+ "\n"
+ "Usage: finf [OPTION]... [FILE|DIRECTORY] ...\n"
+ "\n"
+ "Options:\n"
+ "  -c    specify config file (- = STDIN)\n"
+ "  -o    override config setting\n"
+ "  -h    print this help message\n"
+ "\n"
+ "The command-line argument following -o has the format key=value (to set the\n"
+ "setting) or key (to unset the setting).\n"
+ "\n"
+ "If a config file is not specified, default settings will be used.\n"
+ "\n"
+ "Info fields\n"
+ "-----------\n"
+ "\n"
+ "* path:       the path without the filename\n"
+ "* filename:   the filename\n"
+ "* size:       the size in bytes\n"
+ "* modified:   last-modified timestamp\n"
+ "* md5:        MD5 checksum\n"
+ "* sha-1:      SHA-1 checksum\n"
+ "* sha-256:    SHA-256 checksum\n"
+ "* eol:        system line-terminator\n"
+ "* cr:         carriage return\n"
+ "* lf:         line feed\n"
+ "* crlf:       carriage-return-line-feed\n"
+ "* eolcount:   number of line terminators\n"
+ "* crcount:    number of carriage returns\n"
+ "* lfcount:    number of line feeds\n"
+ "* crlfcount:  number of carriage-return-line-feeds\n"
+ "* class:      heuristic classification of the file as EMTPY, TEXT or BINARY\n"
+ "* space:      a space char\n"
+ "* tab:        a tab char\n"
+ "* hex:        binary to lowercase hexadecimal\n"
+ "* HEX:        binary to uppercase hexadecimal\n"
+ "* base64:     binary to base64\n"
+ "* base64mime: binary to multiline base64\n"
+ "* base64url:  binary to URL/filename-safe base64\n"
+ "\n"
+ "Config file\n"
+ "-----------\n"
+ "\n"
+ "A config file contains parameters specified as key-value pairs. The following\n"
+ "parameters are supported:\n"
+ "\n"
+ "* output:..........a format where tokens on the form ${field} will be replaced\n"
+ "                   by the corresponding field value. (Default:\n"
+ "                   ${filename}${eol})\n"
+ "* filter:..........an input-file filter on one of two forms:\n"
+ "  - regex:...........a regex that matches filenames to include as input\n"
+ "  - format pattern:..an info format followed by one or more regex patterns, each\n"
+ "                     preceded by either ++ to include matches or -- to exclude\n"
+ "                     matches (example: ${filename}++.+\\.html?--index\\..{3,4})\n"
+ "* order:...........sort-order specification on the following form:\n"
+ "                   field1 [asc|desc] field2 [asc|desc] ...\n"
+ "                   (e.g. path filename size asc modified desc)\n"
+ "* count:...........number of info units to output\n"
+ "* hash.algorithms:.a whitespace-separated list of hash algorithms. Each algorthm\n"
+ "                   will be available as an info field with the name being the\n"
+ "                   algorithm in lowercase. (Default: MD5 SHA-1 SHA-256)\n"
+ "* date.format:.....applied to timestamp values. If empty, no date formatting is\n"
+ "                   performed. (Default: yyyy-MM-dd HH:mm)\n"
+ "* prefilter:.......whether or not to filter files before acquiring values of\n"
+ "                   fields referenced by other settings. (Default: 1)\n"
+ "* search:..........specifies parameters for a search in the files' content for a\n"
+ "                   match against a regex pattern. The value of this setting has\n"
+ "                   the following format:\n"
+ "                   /regex/o=occurrence,g=groups,c=charset\n"
+ "                   occurrence is the occurrence to search for. A negative\n"
+ "                   occurrence searches from the bottom rather than the top. An\n"
+ "                   occurrence of zero results in not found. (Default: 1)\n"
+ "                   groups is the number of regex groups to include. (Default: 0)\n"
+ "                   charset is the character encoding to apply to the files'\n"
+ "                   content. (Default: local default charset)\n"
+ "                   This setting makes the following fields available, but\n"
+ "                   prefixed with this setting's key and a period (.):\n"
+ "  - found:...........0 or 1 depending on whether a match was found or not\n"
+ "  - groupcount:......number of regex groups, excluding group zero\n"
+ "  - line:............one-based line number of matched regex (-1 if not found)\n"
+ "  - input:...........the matched input sequence (empty if not found)\n"
+ "  - start:...........zero-based char index of the start of the matched sequence\n"
+ "                     (-1 if not found)\n"
+ "  - end:.............the first zero-based char index after the matched sequence\n"
+ "                     (-1 if not found)\n"
+ "                   For each included group, the following fields will be\n"
+ "                   available, but prefixed with this setting's key, a period\n"
+ "                   (.), the group number and a hyphen (-):\n"
+ "  - line:............one-based line number of matched group (-1 if not found)\n"
+ "  - start:...........zero-based char index of the start of the matched group (-1\n"
+ "                     if not found)\n"
+ "  - end:.............the first zero-based char index after the matched group (-1\n"
+ "                     if not found)\n"
+ "                   If included groups exceed the group count, excess groups will\n"
+ "                   be not found.\n"
+ "\n"
+ "Certain settings can have multiple instances specified in the same config. This\n"
+ "is accomplished by appending a period (.) and an optional suffix to their\n"
+ "standard keys, thereby forming unique keys. These settings are applied in sort\n"
+ "order of their keys. The following settings support this:\n"
+ "* filter\n"
+ "* search\n"
+ "\n"
+ "Sample config-file\n"
+ "------------------\n"
+ "\n"
+ "# Searches a Git repository for scripts with both shebang and CRLF line-endings.\n"
+ "\n"
+ "# exclude the .git dir\n"
+ "filter.0=${path}--.*/\\\\.git/.*\n"
+ "\n"
+ "# include only non-empty text files\n"
+ "filter.1=${class}++TEXT\n"
+ "\n"
+ "# include files containing CRLF\n"
+ "filter.2=${crlfcount}--0\n"
+ "\n"
+ "# search for a shebang\n"
+ "search.0=/^#!.*$/\n"
+ "\n"
+ "# include files containing a shebang\n"
+ "filter.3=${search.0.found}++1\n"
+ "\n"
+ "# output each file along with the shebang they contain\n"
+ "output=${path}${filename}${space}${search.0.input}${eol}\n"
+ "\n"
+ "Examples\n"
+ "--------\n"
+ "\n"
+ "Example 1: specify a config file:\n"
+ "finf -c myconfig.properties main.c\n"
+ "\n"
+ "Example 2: display SHA-1 checksum:\n"
+ "finf -o \"output=${sha-1}${eol}\" program.zip\n"
+ "\n"
+ "Example 3: read config from standard input:\n"
+ "finf -c - index.php\n"
+ "\n"
+ "Example 4: unset a config setting:\n"
+ "finf -c playlist.properties -o order MyMusic\n